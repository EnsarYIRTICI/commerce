import type { GetServerSidePropsContext, Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

import { Barcode, LayoutDashboard, Package2 } from "lucide-react";
import { Sidebar, SidebarItem } from "@/components/Sidebar";
import { headers } from "next/headers";
import { AuthProvider } from "@/lib/contexts/AuthContext";
import { SidebarProvider } from "@/lib/contexts/SidebarContext";
import { ToastProvider } from "@/lib/contexts/ToastContext";
import { getPathname, getToken, getUser } from "@/lib/utils/headerUtils";
import { authUser } from "@/lib/services/auth.service";
import { ContentProvider } from "@/lib/contexts/ContentContext";

import ErrorBoundary from "@/components/ErrorBoundry";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const pathname = getPathname(headers);
  const token = getToken(headers);

  let user;

  if (token) {
    try {
      const data = await authUser(token);

      user = data;
    } catch (error) {
      console.error(error);
    }
  }

  const contentNodes = [
    {
      key: "0-0",
      text: "Dashboard",
      icon: <LayoutDashboard />,
      path: "/",
    },
    {
      key: "1-0",
      text: "Product",
      icon: <Barcode />,
      path: "/product",
    },
    {
      key: "2-0",
      text: "Order",
      icon: <Package2 />,
      path: "/order",
    },
  ];

  const isSidebarVisible = contentNodes.some((data) => data.path === pathname!);

  return (
    <html lang="en">
      <body className={`h-screen w-screen overflow-hidden flex`}>
        <ErrorBoundary>
          <ToastProvider>
            {token && user ? (
              <ContentProvider token={token} user={user}>
                {isSidebarVisible && (
                  <SidebarProvider>
                    <Sidebar>
                      {contentNodes.map((node) => (
                        <SidebarItem
                          key={node.key}
                          text={node.text}
                          icon={node.icon}
                          path={node.path}
                        />
                      ))}
                    </Sidebar>
                  </SidebarProvider>
                )}
                {children}
              </ContentProvider>
            ) : (
              <AuthProvider>{children}</AuthProvider>
            )}
          </ToastProvider>
        </ErrorBoundary>
      </body>
    </html>
  );
}
